<TrustFrameworkPolicy
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06"
        PolicySchemaVersion="0.3.0.0" TenantId="lsnb2c.onmicrosoft.com"
        PolicyId="B2C_1A_B2C_USER_SIGNIN_TEST"
        PublicPolicyUri="http://lsnb2c.onmicrosoft.com/B2C_USER_SIGNIN_TEST"
        DeploymentMode="Development"
        UserJourneyRecorderEndpoint="urn:journeyrecorder:applicationinsights"
        TenantObjectId="38d58090-7896-4da6-9ca1-e48692a090e0">
  <!--  This file contains definition of policies used for users-->
  <BasePolicy>
    <TenantId>lsnb2c.onmicrosoft.com</TenantId>
    <!-- Inherits from -->
    <PolicyId>B2C_1A_TrustFrameworkExtensions</PolicyId>
  </BasePolicy>
  <BuildingBlocks>
    <!-- Additional claims that are used in this policy, sessionId is defined in base file -->
    <ClaimsSchema>
      <ClaimType Id="policyName">
        <DisplayName>Policy name</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="requestBody">
        <DisplayName>Token enrichment request body</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
    </ClaimsSchema>

    <ClaimsTransformations>
      <ClaimsTransformation Id="GenerateJsonTransformation" TransformationMethod="GenerateJson">
        <InputClaims>
          <InputClaim TransformationClaimType="policyName" ClaimTypeReferenceId="policyName" />
          <InputClaim TransformationClaimType="platformAccountOid" ClaimTypeReferenceId="platformAccountOid" />
          <InputClaim TransformationClaimType="groupList" ClaimTypeReferenceId="groups" />
          <InputClaim TransformationClaimType="onPremisesSamAccountName" ClaimTypeReferenceId="SamAccountName" />
          <InputClaim TransformationClaimType="firstName" ClaimTypeReferenceId="firstName" />
          <InputClaim TransformationClaimType="lastName" ClaimTypeReferenceId="lastName" />
          <InputClaim TransformationClaimType="displayName" ClaimTypeReferenceId="displayName" />
          <InputClaim TransformationClaimType="sessionId" ClaimTypeReferenceId="sessionId" />
          <InputClaim TransformationClaimType="providerId" ClaimTypeReferenceId="tenantId" />
          <InputClaim TransformationClaimType="providerType" ClaimTypeReferenceId="providerType" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="requestBody" TransformationClaimType="outputClaim"/>
        </OutputClaims>
      </ClaimsTransformation>
    </ClaimsTransformations>
  </BuildingBlocks>

  <!-- Additional claim provider, JwtIssuer - extension of default provider declared in base file -->
  <ClaimsProviders>
    <ClaimsProvider>
      <!-- Call Token Enrichment Point, add sessionId to JWT token-->
      <DisplayName>REST API</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="REST-CreateInternalSession">
          <DisplayName>Create internal session for the user</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://osso-integration.lsn.io/gateway/token/user</Item>
            <Item Key="SendClaimsIn">Body</Item>
            <Item Key="IncludeClaimResolvingInClaimsHandling">true</Item>
            <Item Key="ClaimUsedForRequestPayload">requestBody</Item>
            <Item Key="AuthenticationType">Basic</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="BasicAuthenticationUsername" StorageReferenceId="B2C_1A_RestApiTokenEnrichmentUsername" />
            <Key Id="BasicAuthenticationPassword" StorageReferenceId="B2C_1A_RestApiTokenEnrichmentPassword" />
          </CryptographicKeys>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="GenerateJsonTransformation"/>
          </InputClaimsTransformations>
          <InputClaims>
            <!-- Claims that are in http request body -->
            <InputClaim ClaimTypeReferenceId="policyName" DefaultValue="{Policy:PolicyId}" AlwaysUseDefaultValue="true" Required="true" />
            <InputClaim ClaimTypeReferenceId="platformAccountOid" />
            <InputClaim ClaimTypeReferenceId="sessionId" />
            <InputClaim ClaimTypeReferenceId="groups" />
            <InputClaim ClaimTypeReferenceId="SamAccountName" />
            <InputClaim ClaimTypeReferenceId="firstName" />
            <InputClaim ClaimTypeReferenceId="lastName" />
            <InputClaim ClaimTypeReferenceId="displayName" />
            <InputClaim ClaimTypeReferenceId="requestBody" />
            <InputClaim ClaimTypeReferenceId="tenantId" />
            <InputClaim ClaimTypeReferenceId="providerType" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="sessionId" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <ClaimsProvider>
      <!-- Call SSO endpoint to update redis entry TTL -->
      <DisplayName>REST API</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="REST-UpdateSession">
          <DisplayName>Update session time</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://osso-integration.lsn.io/gateway/token/user/refresh</Item>
            <Item Key="SendClaimsIn">Body</Item>
            <Item Key="IncludeClaimResolvingInClaimsHandling">true</Item>
            <Item Key="AuthenticationType">Basic</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="BasicAuthenticationUsername" StorageReferenceId="B2C_1A_RestApiTokenEnrichmentUsername" />
            <Key Id="BasicAuthenticationPassword" StorageReferenceId="B2C_1A_RestApiTokenEnrichmentPassword" />
          </CryptographicKeys>
          <InputClaims>
            <!-- Claims that are in http request body -->
            <InputClaim ClaimTypeReferenceId="sessionId" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
  </ClaimsProviders>
  <UserJourneys>
    <!-- Ocean S2S journey for user -->
    <UserJourney Id="UserADJourney">
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="LSNExchange" />
            <ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountSigninEmailExchange" />
          </ClaimsProviderSelections>
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="LSNExchange" TechnicalProfileReferenceId="AADLSN-OpenIdConnect" />
<!--            <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email" />-->
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="3" Type="ClaimsExchange">
            <Preconditions>
              <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                <Value>issuerUserId</Value>
                <Action>SkipThisOrchestrationStep</Action>
              </Precondition>
            </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <!-- 4. Update internal session if exists -->
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>sessionId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="RestApiUpdateSession" TechnicalProfileReferenceId="REST-UpdateSession" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <!-- 5. Call Token Enrichment Point if new session -->
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>sessionId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="RestApiCreateInternalSession" TechnicalProfileReferenceId="REST-CreateInternalSession" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- 5. Sign and sent JWT -->
        <OrchestrationStep Order="6" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>

    <UserJourney Id="UserRefreshTokenJourney">
      <!-- Journey for token refresh call -->
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- 1, 3 and 4 - default steps -->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="RefreshTokenSetupExchange" TechnicalProfileReferenceId="RefreshTokenReadAndSetup" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Extra steps can be added before or after this step for REST API or claims transformation calls-->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <!-- 2. Call Token Enrichment Point. There will be new Redis key after this operation -->
          <ClaimsExchanges>
            <ClaimsExchange Id="RestApiCreateInternalSession" TechnicalProfileReferenceId="REST-UpdateSession" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="CheckRefreshTokenDateFromAadExchange" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId-CheckRefreshTokenDate" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="4" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
  </UserJourneys>
  <RelyingParty>
    <!-- Every call in this policy goes to UserADJourney by default -->
    <DefaultUserJourney ReferenceId="UserADJourney" />
<!--    <Endpoints>-->
<!--      &lt;!&ndash; Journey used for refresh token action &ndash;&gt;-->
<!--      <Endpoint Id="Token" UserJourneyReferenceId="UserRefreshTokenJourney" />-->
<!--    </Endpoints>-->
    <UserJourneyBehaviors>
      <!-- Scope: Tenant, Application, Policy or Suppressed-->
      <SingleSignOn Scope="Tenant" EnforceIdTokenHintOnLogout="true" />
      <!-- Possible values: Absolute, Rolling-->
      <SessionExpiryType>Rolling</SessionExpiryType>
      <SessionExpiryInSeconds>1800</SessionExpiryInSeconds>
      <JourneyInsights TelemetryEngine="ApplicationInsights" InstrumentationKey="2a9b9ca4-baae-4090-8ad5-262149136b51" DeveloperMode="true" ClientEnabled="true" ServerEnabled="true" TelemetryVersion="1.0.0" />
      <ScriptExecution>Allow</ScriptExecution>
    </UserJourneyBehaviors>
    <TechnicalProfile Id="PolicyProfile">
      <DisplayName>PolicyProfile</DisplayName>
      <Protocol Name="OpenIdConnect" />
      <OutputClaims>
        <!-- Additional claims in final JWT token -->
        <OutputClaim ClaimTypeReferenceId="platformAccountOid" PartnerClaimType="sub" />
        <OutputClaim ClaimTypeReferenceId="sessionId" />
      </OutputClaims>
      <SubjectNamingInfo ClaimType="sub" />
    </TechnicalProfile>
  </RelyingParty>
</TrustFrameworkPolicy>